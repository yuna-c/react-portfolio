.Layout {
	width: 80vw;
	margin: 100px auto;
	min-height: 60vh;
	opacity: 0;
	transform-origin: left top;
	transform: translateY(200px);
	transition: opacity 1s, transform 1s;
	/*
	transition-property: opacity 1s, transform 1s;
	tansition-property:opactiy;
	transition-duration:1s;
	transition-delay:0s;
	*/

	h1 {
		font-size: 0;
		font-weight: normal;
		margin-bottom: 5px;
		opacity: 0.7;

		span {
			font-size: var(--titSize0);
			transform: scale(4);
			opacity: 0;
			letter-spacing: -0.05em;
			// display: inline-block; // 디자이너가 못건들게
			// transition: opacity 0.7s, transform 0.7s;
			transition-property: opacity, transform;
		}
	}

	.bar {
		width: 50px;
		height: 1px;
		background: var(--baseColor);
		opacity: 0.7;
		margin-bottom: 100px;
	}

	&.on {
		opacity: 1;
		transform: translateY(0px);

		h1 {
			span {
				opacity: 1;
				transform: scale(1);
			}
		}

		.bar {
			width: 45px;
			opacity: 0.7;
		}
	}
}

//tablet
.tablet,
.mobile {
	.layout {
		width: 80vw;
		margin: 60px auto;

		.bar {
			margin-bottom: 60px;
		}
	}
}

//mobile
.mobile {
	.layout {
		width: 85vw;
		margin: 50px auto;

		h1 {
			span {
				font-size: 10vw;
			}
		}

		.bar {
			margin-bottom: 50px;
		}
	}
}

/*
css: css는 외부 도움없이 브라우저의 기능만으로 처리가능 (스타일만 제어가능)
	css변수: 스타일 관련값만 담을 수 있음 (미디어쿼리의 폭 같은 브라우저가 제어해야 되는 값들은 할당 불가)
	scss: css내부기능뿐만 아니라 브라우저기능까지 활용한 문법 (일반 css로 컴파일 필요)
	scss변수: 브라우저가 인식해야되는 미디어쿼리 폭 조차도 변수에 담을 수 있음

	react에서 scss변수를 활용시의 문제점
	: scss는 한번 컴파일되고 나면 컴파일 시점의 구문으로 값이 고정됨, 리액트에서 추후 이벤트를 통한 scss변수의 값을 변경불가

	css의 변수는 컴파일 과정을 거치는 것이 아닌 순수 css문법만 가지고 실시간으로 브라우저가 값을 처리하기 때문에
	:해당 값 자체를 리액트가 fiber node에 추가해서 값의 변경을 처리 가능
*/
